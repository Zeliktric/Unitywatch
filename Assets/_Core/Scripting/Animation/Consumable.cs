using UnityEngine;
using UnityEngine.UI;

using NaughtyAttributes;
using System.Collections;

namespace Unitywatch
{
    /// <summary>
    /// Manages the state of consumable items (namely health packs and ultimate accelerators).
    /// </summary>
    public class Consumable : MonoBehaviour
    {
        // Respective value that the pickup gives when interacted with.
        public double value;

        [SerializeField]
        private float respawnTime;

        [SerializeField, Foldout("Timer Settings")]
        private GameObject timer;

        [SerializeField, Foldout("Timer Settings")]
        private Image hologramTimer,
            baseTimer;

        [SerializeField, Foldout("Animation Settings")]
        private float rotateTime = 4f,
            bobDuration = 2f,
            bobHeight = 0.1f;

        private Vector3 startPos;
        private double currentTime;

        private void Start()
        {
            startPos = transform.localPosition;
        }

        private void Update()
        {
            // Spin on the y-axis.
            transform.Rotate(Vector3.up, 360f / rotateTime * Time.deltaTime);

            Bobbing();
            Timer();
        }

        /// <summary>
        /// Called when this consumable is interacted with (by a player).
        /// </summary>
        public void Interact()
        {
            transform.GetChild(0).gameObject.SetActive(false);

            // Starts the respawn timer.
            timer.SetActive(true);
            currentTime = respawnTime;

            StartCoroutine(Respawn());
        }
        
        /// <summary>
        /// Bobbing animation effect (generated by AI).
        /// </summary>
        private void Bobbing()
        {
            // Normalized time in [0,1] repeating every bobDuration.
            float t = Time.time % bobDuration / bobDuration;

            // Cosine wave goes 1 → -1 → 1 over [0, 2π].
            // Scale it to 0 → 1 → 0 (smooth up and smooth down).
            float bobOffset = (1f - Mathf.Cos(t * Mathf.PI * 2f)) * 0.5f;

            // Apply vertical offset.
            float newY = startPos.y + bobOffset * bobHeight;
            transform.localPosition = new Vector3(startPos.x, newY, startPos.z);
        }

        /// <summary>
        /// Manages the state of the consumable and its world-UI timer after its respawn time has elapsed.
        /// </summary>
        private IEnumerator Respawn()
        {
            yield return new WaitForSeconds(respawnTime);
            transform.GetChild(0).gameObject.SetActive(true);
            timer.SetActive(false);
        }

        /// <summary>
        /// Manages the look of the world-UI elements based on the time left to respawn.
        /// </summary>
        private void Timer()
        {
            if (currentTime > 0)
            {
                hologramTimer.fillAmount = 1f - (float)currentTime / respawnTime;
                if (baseTimer != null) baseTimer.fillAmount = 1f - (float)currentTime / respawnTime;

                timer.transform.localRotation = Camera.main.transform.localRotation;

                currentTime -= Time.deltaTime;
            }
        }
    }
}